#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# Fail fast and enable debugging to make the script output more verbose
set -e
set -x

# Directory to store custom set environment variables
PROFILE_PATH=".profile.d/julia.sh"

# Function to append environment variables to $PROFILE_PATH
set-env() {
  echo "export $1=$2" >>$PROFILE_PATH
}

# parse args
BUILD_DIR=$1
CACHE_DIR=$2

cd "${BUILD_DIR}"

mkdir -p .profile.d

# Default Julia version to use if not specified in Project.toml
DEFAULT_JULIA_VERSION=1.8.5
JULIA_VERSION="$DEFAULT_JULIA_VERSION"

# Extract Julia version from Project.toml, default to $DEFAULT_JULIA_VERSION if not specified
if [[ -f Project.toml ]]; then
  # Improved parsing logic for extracting Julia version
  JULIA_VERSION="$(grep '^julia' Project.toml | cut -d '"' -f 2)"
  [[ -z "$JULIA_VERSION" ]] && JULIA_VERSION="$DEFAULT_JULIA_VERSION"
fi

# Construct the Julia download URL based on the extracted version
JULIA_URL="https://julialang-s3.julialang.org/bin/linux/x64/$(echo "$JULIA_VERSION" | cut -d '.' -f 1).$(echo "$JULIA_VERSION" | cut -d '.' -f 2)/julia-${JULIA_VERSION}-linux-x86_64.tar.gz"

echo "-----> Installing julia $JULIA_VERSION ...."
echo "        - $JULIA_URL"

# Download Julia using curl with the -f flag to fail on HTTP errors
curl -fLO "$JULIA_URL"
if [ $? -ne 0 ]; then
  # Provide a clear error message if Julia download fails
  echo " !     Failed to download Julia $JULIA_VERSION from $JULIA_URL"
  exit 1
fi

# Extract the downloaded archive to the 'julia' directory
mkdir julia
tar -xzf julia-*.tar.gz -C julia --strip-components=1
rm julia-*.tar.gz

# Set environment variables for runtime
set-env PATH "\$HOME/.apt/usr/bin:\$HOME/julia/bin:\$PATH"
set-env LIBRARY_PATH "\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/julia/lib:\$HOME/julia/lib/x86_64-linux-gnu:\$LIBRARY_PATH"
set-env LD_LIBRARY_PATH "\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/julia/lib:\$HOME/julia/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH"
set-env JULIA_LOAD_PATH "@:\$HOME:"

# Execute Julia to instantiate and precompile packages
julia --project=. -e "using Pkg; Pkg.instantiate(); Pkg.precompile();"

# Copy the .julia directory to the build directory to cache the packages
cp -r ~/.julia "${BUILD_DIR}/.julia"

# Added debugging information outputs
echo " done"
